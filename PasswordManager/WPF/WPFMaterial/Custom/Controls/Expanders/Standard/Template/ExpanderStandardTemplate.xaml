<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:expanderStandard="clr-namespace:WPFMaterial.Custom.Controls.Expanders.Standard.Code">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary
			Source="pack://application:,,,/WPFMaterial;component/Custom/Controls/Expanders/Standard/Resources/Values.xaml"/>

		<ResourceDictionary
			Source="pack://application:,,,/WPFMaterial;component/Custom/Controls/Expanders/Standard/Resources/Colors.xaml"/>

		<ResourceDictionary
			Source="pack://application:,,,/WPFMaterial;component/Custom/Controls/Expanders/Standard/Resources/VectorIcons.xaml"/>

		<ResourceDictionary
			Source="pack://application:,,,/WPFMaterial;component/Common/Resources/Templates.xaml"/>
	</ResourceDictionary.MergedDictionaries>


	<Style
		x:Key="ToggleButton-ExpanderHeader-Template"
		TargetType="ToggleButton"
		BasedOn="{StaticResource ButtonBase-CursorHandIsMouseOverAndIsPressed-Style}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="ToggleButton">
					<Border
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						Background="{TemplateBinding Background}"
						Padding="{TemplateBinding Padding}">
						<Grid
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="Auto"/>

								<ColumnDefinition
									Width="Auto"/>
							</Grid.ColumnDefinitions>

							<Path
								Grid.Column="0"
								Name="toggleButtonIcon"
								Stretch="Uniform"
								Fill="{StaticResource SolidColorBrush-Icon}"/>
						</Grid>
					</Border>

					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="DockPanel.Dock"
									Value="Left"/>

								<Condition
									Property="IsChecked"
									Value="False"/>
							</MultiTrigger.Conditions>

							<Setter
								TargetName="toggleButtonIcon"
								Property="RenderTransform"
								Value="{StaticResource RotateTransform-Minus90}"/>
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="DockPanel.Dock"
									Value="Left"/>

								<Condition
									Property="IsChecked"
									Value="True"/>
							</MultiTrigger.Conditions>

							<Setter
								TargetName="toggleButtonIcon"
								Property="RenderTransform"
								Value="{StaticResource RotateTransform-Plus90}"/>
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="DockPanel.Dock"
									Value="Top"/>

								<Condition
									Property="IsChecked"
									Value="True"/>
							</MultiTrigger.Conditions>

							<Setter
								TargetName="toggleButtonIcon"
								Property="RenderTransform"
								Value="{StaticResource RotateTransform-Plus180}"/>
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="DockPanel.Dock"
									Value="Right"/>

								<Condition
									Property="IsChecked"
									Value="False"/>
							</MultiTrigger.Conditions>

							<Setter
								TargetName="toggleButtonIcon"
								Property="RenderTransform"
								Value="{StaticResource RotateTransform-Minus90}"/>
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="DockPanel.Dock"
									Value="Right"/>

								<Condition
									Property="IsChecked"
									Value="True"/>
							</MultiTrigger.Conditions>

							<Setter
								TargetName="toggleButtonIcon"
								Property="RenderTransform"
								Value="{StaticResource RotateTransform-Plus90}"/>
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="DockPanel.Dock"
									Value="Bottom"/>

								<Condition
									Property="IsChecked"
									Value="False"/>
							</MultiTrigger.Conditions>

							<Setter
								TargetName="toggleButtonIcon"
								Property="RenderTransform"
								Value="{StaticResource RotateTransform-Plus180}"/>
						</MultiTrigger>

						<Trigger
							Property="IsMouseOver"
							Value="True">
							<Setter
								TargetName="toggleButtonIcon"
								Property="Fill"
								Value="{StaticResource SolidColorBrush-IconMouseOver}"/>
						</Trigger>

						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="toggleButtonIcon"
								Property="Fill"
								Value="{StaticResource SolidColorBrush-IconPressed}"/>
						</Trigger>

						<Trigger
							Property="IsChecked"
							Value="True">
							<Setter
								TargetName="toggleButtonIcon"
								Property="Fill"
								Value="Blue"/>
						</Trigger>

						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="toggleButtonIcon"
								Property="Stroke"
								Value="{StaticResource SolidColorBrush-IconDisabled}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style
		TargetType="expanderStandard:ExpanderStandardCode">
		<Setter
			Property="ExpandDirection"
			Value="Down"/>

		<Setter
			Property="Background"
			Value="Transparent"/>

		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch"/>

		<Setter
			Property="VerticalContentAlignment"
			Value="Stretch"/>

		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="expanderStandard:ExpanderStandardCode">
					<DockPanel>
						<ToggleButton Width="6"
							DockPanel.Dock="Top"
							Name="expanderHeader"
							Content="{TemplateBinding Header}"
							ContentTemplate="{TemplateBinding HeaderTemplate}"
							ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
							Foreground="{TemplateBinding Foreground}"
							FontFamily="{TemplateBinding FontFamily}"
							FontSize="{TemplateBinding FontSize}"
							FontStyle="{TemplateBinding FontStyle}"
							FontWeight="{TemplateBinding FontWeight}"
							FontStretch="{TemplateBinding FontStretch}"
							IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
							Focusable="{TemplateBinding Focusable}"
							FocusVisualStyle="{StaticResource Control-RectangleFocusVisualStylePlus3-Template}"
							Style="{StaticResource ToggleButton-ExpanderHeader-Template}">
							<ToggleButton.ToolTip>
								<ToolTip
									Name="expanderHeaderToolTip"
									Content="{TemplateBinding HeaderToolTipContent}"
									Padding="{TemplateBinding HeaderToolTipPadding}"
									Style="{StaticResource ToolTip-ToolTipStandard-Template}"/>
							</ToggleButton.ToolTip>
						</ToggleButton>

						<Border
							DockPanel.Dock="Bottom"
							Name="expanderContent"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
					</DockPanel>

					<ControlTemplate.Triggers>
						<Trigger
							Property="IsExpanded"
							Value="False">
							<Setter
								TargetName="expanderContent"
								Property="Visibility"
								Value="Collapsed"/>
						</Trigger>

						<Trigger
							Property="ExpandDirection"
							Value="Left">
							<Setter
								TargetName="expanderHeader"
								Property="DockPanel.Dock"
								Value="Right"/>

							<Setter
								TargetName="expanderContent"
								Property="DockPanel.Dock"
								Value="Left"/>
						</Trigger>

						<Trigger
							Property="ExpandDirection"
							Value="Up">
							<Setter
								TargetName="expanderHeader"
								Property="DockPanel.Dock"
								Value="Bottom"/>

							<Setter
								TargetName="expanderContent"
								Property="DockPanel.Dock"
								Value="Top"/>
						</Trigger>

						<Trigger
							Property="ExpandDirection"
							Value="Right">
							<Setter
								TargetName="expanderHeader"
								Property="DockPanel.Dock"
								Value="Left"/>

							<Setter
								TargetName="expanderContent"
								Property="DockPanel.Dock"
								Value="Right"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>